// Variables
$color-blur: #666;
$color-key: #469fc0;
$color-title: #b68250;
$color-redgoose: #b31e37;
$font-eng: 'Helvetica', Arial, sans-serif;

// Functions
@function prefix($property, $prefixes: (webkit moz o ms)) {
	$vendor-prefixed-properties: transform background-clip background-size;
	$result: ();
	@each $prefix in $prefixes {
		@if index($vendor-prefixed-properties, $property) {
			$property: -#{$prefix}-#{$property}
		}
		$result: append($result, $property);
	}
	@return $result;
}
@function trans-prefix($transition, $prefix: moz) {
	$prefixed: ();
	@each $trans in $transition {
		$prop-name: nth($trans, 1);
		$vendor-prop-name: prefix($prop-name, $prefix);
		$prop-vals: nth($trans, 2);
		$prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
	}
	@return $prefixed;
}

// Mixin
@mixin transform($value) {
	-webkit-transform: $value;
	transform: $value;
}
@mixin transition($args...) {
	$transitions: ();
	@each $declaration in $args {
		$prop: nth($declaration, 1);
		$prop-opts: ();
		$length: length($declaration);
		@for $i from 2 through $length {
			$prop-opts: append($prop-opts, nth($declaration, $i));
		}
		$trans: ($prop, $prop-opts);
		$transitions: append($transitions, $trans, comma);
	}
	-webkit-transition: trans-prefix($transitions, webkit);
	transition: $args;
}
@mixin perspective($value) {
	-webkit-perspective: $value;
	perspective: $value;
}
@mixin backfaceVisibility($value) {
	-webkit-backface-visibility: $value;
	backface-visibility: $value;
}
@mixin linearGradient_h($color, $start, $end) {
	background: $color;
	background: -moz-linear-gradient(left, $start, $end);
	background: -webkit-linear-gradient(left, $start, $end);
	background: -o-linear-gradient(left, $start, $end);
	background: -ms-linear-gradient(left, $start, $end);
	background: linear-gradient(to right, $start, $end);
}
@mixin linearGradient_v($color, $start, $end) {
	background: $color;
	background: -moz-linear-gradient(top, $start, $end);
	background: -webkit-linear-gradient(top, $start, $end);
	background: -o-linear-gradient(top, $start, $end);
	background: -ms-linear-gradient(top, $start, $end);
	background: linear-gradient(to bottom, $start, $end);
}
@mixin flexbox() {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}
@mixin flex($values) {
	-webkit-box-flex: $values;
	-moz-box-flex: $values;
	-webkit-flex: $values;
	-ms-flex: $values;
	flex: $values;
}
@mixin order($val) {
	-webkit-box-ordinal-group: $val;
	-moz-box-ordinal-group: $val;
	-ms-flex-order: $val;
	-webkit-order: $val;
	order: $val;
}
@mixin align-items($value) {
	-webkit-align-items: $value;
	align-items: $value;
}
@mixin multiline-overflow($size, $column) {
	line-height: $size; max-height: $size * $column;
	overflow: hidden; text-overflow: ellipsis;
	display: -webkit-box;
	-webkit-line-clamp: $column;
	-webkit-box-orient: vertical;
}


// Placeholder
%clearfix {
	&:after {content:''; display:block; clear: both;}
}
%ul {margin: 0; padding: 0; list-style: none;}
%button {
	display: inline-block; cursor: pointer;
	margin: 1px 2px; padding: 11px 20px;
	font-size: 14px; color: #fff; text-decoration: none;
	border: none; background: #a5acb0;
	&.size-small {padding: 8px 15px; font-size: 12px;}
	&.col-key {color: #fff; background: #72b3ca;}
	&.block {display: block; margin-left: 0; margin-right: 0;}
}
%gs-icon {
	font-family: 'goose-icons', sans-serif;
	speak: none;
	font-style: normal; font-weight: normal; font-variant: normal; text-transform: none;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}